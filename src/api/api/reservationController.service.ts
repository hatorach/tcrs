/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ReservationAddRequest } from '../model/reservationAddRequest';
import { ReservationAddResponse } from '../model/reservationAddResponse';
import { ReservationDetailResponse } from '../model/reservationDetailResponse';
import { ReservationGetRequest } from '../model/reservationGetRequest';
import { ReservationResponse } from '../model/reservationResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReservationControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * add
     * 
     * @param reservationAddRequest reservationAddRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUsingPOST(reservationAddRequest: ReservationAddRequest, observe?: 'body', reportProgress?: boolean): Observable<ReservationAddResponse>;
    public addUsingPOST(reservationAddRequest: ReservationAddRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReservationAddResponse>>;
    public addUsingPOST(reservationAddRequest: ReservationAddRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReservationAddResponse>>;
    public addUsingPOST(reservationAddRequest: ReservationAddRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationAddRequest === null || reservationAddRequest === undefined) {
            throw new Error('Required parameter reservationAddRequest was null or undefined when calling addUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ReservationAddResponse>(`${this.basePath}/reservation/add`,
            reservationAddRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * find
     * 
     * @param from from
     * @param to to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUsingGET(from: Date, to: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<ReservationResponse>>;
    public findUsingGET(from: Date, to: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReservationResponse>>>;
    public findUsingGET(from: Date, to: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReservationResponse>>>;
    public findUsingGET(from: Date, to: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling findUsingGET.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling findUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined) {
            queryParameters = queryParameters.set('from', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('to', <any>to.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ReservationResponse>>(`${this.basePath}/reservation/find/:from/:to`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get
     * 
     * @param reservationGetRequest reservationGetRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'body', reportProgress?: boolean): Observable<ReservationDetailResponse>;
    public getUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReservationDetailResponse>>;
    public getUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReservationDetailResponse>>;
    public getUsingPOST(reservationGetRequest: ReservationGetRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationGetRequest === null || reservationGetRequest === undefined) {
            throw new Error('Required parameter reservationGetRequest was null or undefined when calling getUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ReservationDetailResponse>(`${this.basePath}/reservation/get`,
            reservationGetRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * remove
     * 
     * @param reservationGetRequest reservationGetRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public removeUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public removeUsingPOST(reservationGetRequest: ReservationGetRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public removeUsingPOST(reservationGetRequest: ReservationGetRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reservationGetRequest === null || reservationGetRequest === undefined) {
            throw new Error('Required parameter reservationGetRequest was null or undefined when calling removeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/reservation/remove`,
            reservationGetRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
