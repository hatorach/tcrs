import java.util.regex.Pattern
import java.util.stream.Collectors
import cz.habarta.typescript.generator.StringQuotes

buildscript {
  ext {
    springBootVersion = '1.5.4.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('cz.habarta.typescript-generator:typescript-generator-gradle-plugin:1.25.322')

  }
}

plugins {
  id "org.sonarqube" version "2.5"
}

apply plugin: 'checkstyle'
apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'

jar {
  baseName = 'tcrs'
  version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'com.hatorach.**.web.**.*Request',
    'com.hatorach.**.web.**.*Response',
  ]
  customTypeMappings = [
    'java.time.Instant:Date'
  ]
  module = 'endpoints'
  noFileComment = true
  outputFile = '../src/endpoints.d.ts'
  outputKind = 'ambientModule'
  stringQuotes = StringQuotes.singleQuotes
}
bootRun.dependsOn 'generateTypeScript'

dependencies {
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  compile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
  compile 'io.springfox:springfox-swagger2:2.2.2'
  compile 'io.springfox:springfox-swagger-ui:2.2.2'
  compile 'org.modelmapper:modelmapper:0.7.5'
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.boot:spring-boot-starter-cache'
  compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
  compile 'org.springframework.boot:spring-boot-starter-mail'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-web'
//  compile 'org.springframework.session:spring-session'

  compileOnly "org.projectlombok:lombok:1.16.10"

  testCompile 'org.powermock:powermock-mockito-release-full:1.6.4'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
}

idea {
  module {
    downloadSources = true
    excludeDirs += file("bundle")
    excludeDirs += file("src/main/webapp")
  }
}

def fetchIgnoreInTestCoverageFiles = { List<Pattern> ignoreInTestCoverageFlags ->
  def lengthCwd = projectDir.getAbsolutePath().length()

  def containsFlag = { File file ->
    ignoreInTestCoverageFlags.stream().filter({(file.text =~ it).find()}).findFirst().isPresent()
  }

  sourceSets.main.allJava.files.stream()
    .filter(containsFlag)
    .map({it.getAbsolutePath().substring(lengthCwd + 1)})
    .collect(Collectors.toList())
}

checkstyle {
  toolVersion = "7.8.2"
  ignoreFailures = false
  maxWarnings = 0
}
